local lighting = require "main.lighting"

function init(self)
	msg.post("/camera#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post(".", "acquire_input_focus")



	local r = 1024
	lighting.add_light("/light", lighting.LIGHT_TYPE_DIRECTIONAL(), {color = vmath.vector4(1, 1, 1, 0.5), pointing_to = vmath.vector3(0, 0, 0)})
	lighting.add_light("/light1", lighting.LIGHT_TYPE_SPOTLIGHT(), {color = vmath.vector4(1, 0, 0, 1), constant = 1, linear = 1/r, quad = 1/(r*r), pointing_to = go.get_position("/go"), phi = math.rad(30), gamma = math.rad(45)})
	lighting.add_light("/light2", lighting.LIGHT_TYPE_POINT(), {color = vmath.vector4(0, 1, 1, 1), constant = 1/5, linear = 1/r, quad = 1/(r*r)})
	lighting.add_light("/light3", lighting.LIGHT_TYPE_SPOTLIGHT(), {color = vmath.vector4(1, 0, 1, 1), constant = 1, linear = 1/500, quad = 1/250000, pointing_to = vmath.vector3(0), phi = math.rad(20), gamma = math.rad(35)})

	lighting.animate_value("/light1", "pointing_to", go.PLAYBACK_LOOP_PINGPONG, vmath.vector3(-200, -900, 5), go.EASING_INOUTQUAD, 1, 0, function()print("hi")end)
	lighting.animate_value("/light1", "phi", go.PLAYBACK_LOOP_PINGPONG, math.rad(40), go.EASING_INOUTQUAD, 1, 0, function()print("hi")end)


	lighting.animate_value("/light2", "linear", go.PLAYBACK_LOOP_PINGPONG, 1/r - 0.00001, go.EASING_INOUTQUAD, 0.4)
	lighting.animate_value("/light2", "position", go.PLAYBACK_LOOP_PINGPONG, vmath.vector3(-500, -300, 5), go.EASING_INOUTCIRC, 0.4)

	local p3 = go.get_position("/light3"); p3.x = p3.x + 1000
	lighting.animate_value("/light3", "position", go.PLAYBACK_LOOP_PINGPONG, p3, go.EASING_INOUTELASTIC, 4)

	timer.delay(5, false, function()
		lighting.cancel_animations("/light2", "position")
		lighting.cancel_animations("/light1", "phi")
	end)
end

function final(self)
	--
end

function update(self, dt)
	if not self.doOnce then
		self.doOnce = true

		--go.set("/quad#model", "ambient", go.get)
	end
	lighting.update_value("/light3", "pointing_to", go.get_position("/go1"))

	lighting.update_view_position(go.get_position("/camera"))

	for k, v in pairs(lighting.to_update) do
		if v.key == "color" then
			lighting.update_value(v.url, v.key, go.get(v.url.."#sprite", "tint"), true)
		elseif v.key == "constant" then
			lighting.update_value(v.url, v.key, go.get(v.url.."#sprite", "attenuation.x"), true)
		elseif v.key == "linear" then
			lighting.update_value(v.url, v.key, go.get(v.url.."#sprite", "attenuation.y"), true)
		elseif v.key == "quad" then
			lighting.update_value(v.url, v.key, go.get(v.url.."#sprite", "attenuation.z"), true)

		elseif v.key == "phi" then
			lighting.update_value(v.url, v.key, go.get(v.url.."#sprite", "spot_data.x"), true)
		elseif v.key == "gamma" then
			lighting.update_value(v.url, v.key, go.get(v.url.."#sprite", "spot_data.y"), true)
		elseif v.key == "position" then
			lighting.update_value(v.url, v.key, go.get(v.url, "position"), true)
		elseif v.key == "pointing_to" then
			local pt = go.get(v.url.."#sprite", "pointing_to")
			lighting.update_value(v.url, "pointing_to", vmath.vector3(pt.x, pt.y, pt.z), true)
		end
	end

end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	local campos = go.get_position("/camera")
	if action_id == hash("left") then
		go.set("/camera", "position.x", campos.x - 5)
	end
	if action_id == hash("right") then
		go.set("/camera", "position.x", campos.x + 5)
	end
	if action_id == hash("up") then
		go.set("/camera", "position.y", campos.y + 5)
	end
	if action_id == hash("down") then
		go.set("/camera", "position.y", campos.y - 5)
	end

	local thingpos = go.get_position("/go1")
	if action_id == hash("a") then
		go.set("/go1", "position.x", thingpos.x - 5)
	end
	if action_id == hash("d") then
		go.set("/go1", "position.x", thingpos.x + 5)
	end
	if action_id == hash("w") then
		go.set("/go1", "position.y", thingpos.y + 5)
	end
	if action_id == hash("s") then
		go.set("/go1", "position.y", thingpos.y - 5)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
